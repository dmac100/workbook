<?xml version="1.0" encoding="UTF-8"?>
<Workbook>
  <Tabs>
    <Split weight1="610" weight2="390" orientation="vertical">
      <Split weight1="510" weight2="490" orientation="horizontal">
        <Items>
          <Item title="Worksheet" type="WorksheetTabbedView">
            <Command>a = []; for(double x = 0; x &lt; 100; x += 0.01) a.push([x, Math.sin(x) * x * x])</Command>
          </Item>
        </Items>
        <Items>
          <Item title="Canvas" type="CanvasTabbedView">
            <Content>class Scale {
	def min, max, maxValue

	def Scale(values, maxValue) {
		def range = values.max() - values.min()
		this.min = values.min()
		this.max = values.max() + range * 0.3
	
		if(this.min &gt; 0) this.min = 0
		if(this.max &lt; 0) this.max = 0
		
		this.maxValue = maxValue
	}
	
	def getValue(x) {
		return ((x - min) * maxValue) / (max - min)
	}
	
	def getTicks() {
		def step = (max - min) / 7
		def mag = (int) Math.floor(Math.log10(step))
		def magPow = new BigDecimal(1).scaleByPowerOfTen(mag)
		
		def magMsd = (int)(step / magPow + 0.5)
		
		if(magMsd &gt; 5) return getTicksEvery(magPow.multiply(10))
		if(magMsd &gt; 2) return getTicksEvery(magPow.multiply(5))
		if(magMsd &gt; 1) return getTicksEvery(magPow.multiply(2))
		return getTicksEvery(magPow)
	}
	
	def getTicksEvery(c) {
		def ticks = []
		for(def x = new BigDecimal(0); x &gt;= min; x -= c) {
			ticks.add(x)
		}
		for(def x = new BigDecimal(0); x &lt;= max; x += c) {
			ticks.add(x)
		}
		return ticks
	}
}

chartMarginLeft = 50
chartMarginTop = 50
chartWidth = 400
chartHeight = 400

xScale = new Scale(a.collect { it[0] }, chartWidth)
yScale = new Scale(a.collect { it[1] }, chartHeight)

rect([
	x: 0,
	y: 0,
	width: chartWidth + chartMarginLeft * 2,
	height: chartHeight + chartMarginTop * 2,
	fill: 'white'
])

line([
	x1: chartMarginLeft,
	y1: chartHeight - yScale.getValue(0) + chartMarginTop,
	x2: chartWidth + chartMarginLeft,
	y2: chartHeight - yScale.getValue(0) + chartMarginTop,
	stroke: '#ccc'
])

line([
	x1: xScale.getValue(0) + chartMarginLeft,
	y1: chartMarginTop,
	x2: xScale.getValue(0) + chartMarginLeft,
	y2: chartHeight + chartMarginTop,
	stroke: '#ccc'
])

line([
	x1: chartMarginLeft,
	y1: chartMarginTop,
	x2: chartMarginLeft,
	y2: chartMarginTop + chartHeight
])

line([
	x1: chartMarginLeft,
	y1: chartMarginTop + chartHeight,
	x2: chartMarginLeft + chartWidth,
	y2: chartMarginTop + chartHeight
])

xScale.getTicks().each {
	line([
		x1: xScale.getValue(it) + chartMarginLeft,
		y1: chartMarginTop + chartHeight,
		x2: xScale.getValue(it) + chartMarginLeft,
		y2: chartMarginTop + chartHeight + 5
	])
	text([
		x: xScale.getValue(it) + chartMarginLeft - 5,
		y: chartMarginTop + chartHeight + 5,
		text: it,
		fontSize: 8
	])
}

yScale.getTicks().each {
	line([
		x1: chartMarginLeft,
		y1: chartHeight - yScale.getValue(it) + chartMarginTop,
		x2: chartMarginLeft - 5,
		y2: chartHeight - yScale.getValue(it) + chartMarginTop
	])
	text([
		x: chartMarginLeft - 7,
		y: chartHeight - yScale.getValue(it) + chartMarginTop - 5,
		text: it,
		fontSize: 8,
		textAlign: 'right'
	])
}

a.each {
	circle([
		cx: xScale.getValue(it[0]) + chartMarginLeft,
		cy: chartHeight - yScale.getValue(it[1]) + chartMarginTop,
		fill: '#a33',
		r: 2
	])
}</Content>
          </Item>
        </Items>
      </Split>
      <Items>
        <Item title="Console" type="ConsoleTabbedView" />
      </Items>
    </Split>
  </Tabs>
  <Controller>
    <ScriptType>Groovy</ScriptType>
  </Controller>
</Workbook>